//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Frosted Glass";
	DevShader = true;
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"
}

//=========================================================================================================================

struct VertexInput
{
	#include "common/vertexinput.hlsl"
};

//=========================================================================================================================

struct PixelInput
{
	#include "common/pixelinput.hlsl"
};

//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"
	//
	// Main
	//
	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VertexInput i ) )
	{
		PixelInput o = ProcessVertex( i );
		// Add your vertex manipulation functions here
		return FinalizeVertex( o );
	}
}

//=========================================================================================================================

PS
{
    #include "common/pixel.hlsl"
	#include "common.fxc"
	//
	// Main
	//

	float Bias < UiType( Slider ); Default( 0.5 ); UiGroup( "Fresnel" ) >
	float Bias < UiType( Slider ); Default( 0.5 ); UiGroup( "Fresnel" ) >
	float Bias < UiType( Slider ); Default( 0.5 ); UiGroup( "Fresnel" ) >


	PixelOutput MainPs( PixelInput i )
	{
		Material m = GatherMaterial( i );
		/* m.Metalness = 1.3f; // Forces the object to be metalic */

		return FinalizePixelMaterial( i, m );
	}
}